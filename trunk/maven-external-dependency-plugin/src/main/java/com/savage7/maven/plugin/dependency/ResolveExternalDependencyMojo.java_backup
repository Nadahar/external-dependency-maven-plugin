package com.savage7.maven.plugin.dependency;

import java.io.File;
import java.net.URL;

import org.apache.maven.artifact.Artifact;
import org.apache.maven.artifact.ArtifactUtils;
import org.apache.maven.artifact.factory.ArtifactFactory;
import org.apache.maven.artifact.installer.ArtifactInstaller;
import org.apache.maven.artifact.metadata.ArtifactMetadata;
import org.apache.maven.artifact.repository.ArtifactRepository;
import org.apache.maven.artifact.resolver.ArtifactResolver;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugin.install.AbstractInstallMojo;
import org.apache.maven.project.DefaultMavenProjectHelper;
import org.apache.maven.project.MavenProject;
import org.apache.maven.project.artifact.ProjectArtifactMetadata;
import org.codehaus.plexus.util.FileUtils;


 
/**
 * Acquire external Maven artifacts, attach  
 * to project
 *
 * @goal resolve-external
 * 
 * @author <a href="mailto:robert@savage7.com">Robert Savage</a>
 * @see  http://code.google.com/p/maven-external-dependency-plugin/
 * @version 0.1
 * @category Maven Plugin
 */
public class ResolveExternalDependencyMojo extends AbstractExternalDependencyMojo
{

   /**
    * @parameter default-value="${project}"
    * @required
    * @readonly
    */
	protected MavenProject project;

    
   /**
	* @component
	*/
    protected ArtifactInstaller installer;

	 
   /**
    * @parameter expression="${localRepository}"
    * @required
    * @readonly
    */
    protected ArtifactRepository localRepository;

    

	
    /**
     * Used to look up Artifacts in the remote repository.
     * 
     * @parameter expression=
     *  "${component.org.apache.maven.artifact.resolver.ArtifactResolver}"
     * @required
     * @readonly
     */
    protected ArtifactResolver artifactResolver;
    
     
    public void execute() throws MojoExecutionException, MojoFailureException  
    {
        try
        {
            // update base configuration parameters
            // (not sure why this is needed, but doesn't see to work otherwise?)
            //super.createChecksum = this.createChecksum;
            //super.artifactFactory = this.artifactFactory;
            super.localRepository = this.localRepository;
            //super.md5Digester = this.md5Digester;
            //super.sha1Digester = this.sha1Digester;

            getLog().info("RESOLVING EXTERNAL DEPENDENCIES - START: " + stagingDirectory);
            
            // loop over and process all configured artifacts 
            for(ArtifactItem artifactItem : artifactItems)
            {
                getLog().info("PROCESSING ARTIFACT: " + artifactItem.toString());
                
                // local variables
                File tempDownloadFile = null;
                File tempArtifactPomFile = null;
 
                //
                // CREATE MAVEN ARTIFACT
                //
                Artifact artifact = createArtifact(artifactItem);

                // determine if the artifact is already installed in the local Maven repository
                Boolean artifactAlreadyInstalled = getLocalRepoFile(artifact).exists();
                
                // only proceed with this artifact if it is not already 
                // installed or it is configured to be forced.
                if(!artifactAlreadyInstalled || 
                    artifactItem.getForce())
                {
                	
                    if(artifactItem.getForce())
                    {
                        getLog().debug("FORCING ARTIFACT: " + artifactItem.toString());
                    }
                    
                    
                    //
                    // DOWNLOAD FILE FROM URL
                    //
                    if(artifactItem.getDownloadUrl() != null)
                    {
                        getLog().info("DOWNLOADING ARTIFACT FROM: " + artifactItem.getDownloadUrl());
                        
                        // if the user did not specify a local file 
                        // name, then create a temporary file 
                        if(artifactItem.getLocalFile() == null)
                        {
                            tempDownloadFile = File.createTempFile( artifactItem.getGroupId() + "." + artifactItem.getArtifactId(), ".tmp" );
                            artifactItem.setLocalFile(tempDownloadFile.getCanonicalPath());
                            
                            getLog().debug("CREATING TEMP FILE FOR DOWNLOAD: " + tempDownloadFile.getCanonicalPath());
                        }
                        else
                        {
                            getLog().info("SAVING ARTIFACT TO: " + artifactItem.getLocalFile());
                        }
                        
                        // download file from URL 
                        FileUtils.copyURLToFile(new URL(artifactItem.getDownloadUrl()), new File(artifactItem.getLocalFile()));
                        
                        getLog().debug("ARTIFACT FILE DOWNLOADED SUCCESSFULLY.");
                    }
                    
                    
                    //
                    // INSTALL MAVEN ARTIFACT TO LOCAL REPOSITORY
                    //
                    if(artifact != null &&
                       artifactItem.getInstall())
                    {
                        getLog().info("INSTALLING ARTIFACT TO M2 REPO: " + localRepository.getId() );

                        // create Maven artifact POM file
                        tempArtifactPomFile = generatePomFile(artifactItem);
                        ArtifactMetadata artifactPomMetadata = null;
                        if(tempArtifactPomFile != null && tempArtifactPomFile.exists())
                        {
                            artifactPomMetadata = new ProjectArtifactMetadata( artifact, tempArtifactPomFile );
                            artifact.addMetadata( artifactPomMetadata );
                            
                            getLog().info("ARTIFACT ITEM: " + artifactItem.getArtifactId());
                            getLog().info("ARTIFACT:      " + artifact.getArtifactId());
                            getLog().info("ARTIFACT MD IT: " + artifactPomMetadata.getArtifactId());
                            getLog().info("ARTIFACT MD FN: " + artifactPomMetadata.getRemoteFilename());
                            
                        }
                        
                        File installArtifactFile = new File(artifactItem.getLocalFile());

                        // install artifact to local repository
                        //installer.install(installArtifactFile),artifact,localRepository);
                        
                        artifact.setFile(installArtifactFile);
                        
                        // install checksum files to local repository
                        //installChecksums( artifact );
                        
                        artifact.getMetadataList().clear();
                        
                        //Artifact resolvedArtifact = null;
                        artifactResolver.resolve(artifact, null, localRepository);
                        
                        
                        //artifact.addMetadata( artifactPomMetadata );
                        //artifact.setResolved(true);

                        // attach artifact to project
                        artifact.addMetadata(artifactPomMetadata);
                        project.addAttachedArtifact(artifact);
                        
                        getLog().info("ARTIFACT ATTACH : " + artifact.getArtifactId());
                        getLog().info("ARTIFACT MD LIST: " + artifact.getMetadataList().toString());
                        
                        
                    }
                    else
                    {
                        getLog().debug("CONFIGURED TO NOT INSTALL ARTIFACT: " + artifactItem.toString());
                    }

                    // determine if the artifact is already installed in the local Maven repository
                    //getLocalRepoFile(artifact).exists();



                    //DefaultMavenProjectHelper helper = new DefaultMavenProjectHelper();
                    //helper.attachArtifact(project, artifact.getType(), "", new File(artifactItem.getLocalFile()));
                    ////helper.attachArtifact(project, artifact.getType(), artifact.getClassifier(), new File(artifactItem.getLocalFile()));
                    
                    
                    //
                    // DELETE TEMPORARY FILES 
                    //
                    
                    // delete temporary POM file
                    if ( tempArtifactPomFile != null )
                    {
                        getLog().debug("DELETING TEMP POM FILE: " + tempArtifactPomFile.getCanonicalPath());
                        //tempArtifactPomFile.delete();
                    }
                    
                    // delete temporary file if one exists
                    if( tempDownloadFile != null )
                    {
                        getLog().debug("DELETING TEMP DOWNLOAD FILE: " + tempDownloadFile.getCanonicalPath());
                        //tempDownloadFile.delete();
                    }
                }
                else
                {
                    getLog().info("ARTIFACT ALREADY EXISTS IN LOCAL REPO: " + artifactItem.toString());
                }
            }
            
            getLog().info("INSTALL EXTERNAL DEPENDENCIES - END'");
            
        } 
        catch (Exception e) 
        {
            getLog().error(e);
            throw new MojoExecutionException(e.getMessage(), e);
        }
    }
    
  
}
